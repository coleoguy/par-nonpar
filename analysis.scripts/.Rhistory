# Set number of clusters
NumberClusters <- 8
cl <- makeCluster(NumberClusters, outfile = "")
registerDoSNOW(cl)
iter <- 100
iter.results <- list()
# This sets up results with each row being an iteration
results <- as.data.frame(matrix(NA, 1, 18))
colnames(results) <- c("XE0N","XE0P","XE0U","XE1N","XE1P","XE1U","XS0N","XS0P","XS0U",
"XS1N","XS1P","XS1U","YS0N","YS0P","YS0U","YS1N","YS1P","YS1U")
# Type of fusions to introduce
# Possible models: (auto.and.) allXY, allX, allY, nonparX, parX, nonparY, parY
models <- c("auto.and.nonparY")
for(i in 1:length(models)){
model <- models[i]
# Dominance factor of the female benefit allele (allele 1)
# 1 = dominant, 0.5 = additive, 0 = recessive
hs <- c(1)
for(j in 1:length(hs)){
h <- hs[j]
# Recombination distance between SAL locus and
# the point that is fused to the sex chromosome
for(k in 1){
r <- c(0.1)
# Selection coefficient for SAL
for(m in 1){
s <- c(0.9)
iter.results <- foreach(n = 1:iter,  .verbose = T) %dopar% {
pop.gam <- getInitialPop(pop.size = pop.size)
# Number of mutant individuals in a given generation
num.mutes <- rpois(n=generations, lambda = mut.prob * pop.size)
for(p in 1:generations){
# Get Juveniles based on initial gamete pool
pop.juv <- getJuveniles(pop.gam, pop.size)
# Get population fitnesses
pop.fits <- popFit(pop.juv, s = s, h = h)
# Viability Selection
pop.adu <- perfSeln(pop.juv, pop.fits)
# Recombination
pop.recom <- perfGameto(pop.adu, r = r)
# Gametogenesis
pop.gam <- StochRound(pop.recom)
# Mutations
pop.gam <- perfMutation(pop.gam, num.mutes, model)
}
return(pop.gam)
}
for (q in 1:iter){
results <- rbind(results, iter.results[[q]])
}
}
}
}
}
results <- results[-1,]
write.csv(results, 'testfitness_Y_h1_r1_s9.csv')
stopCluster(cl)
dat0 <- read.csv("testfitness_X_h1_r1_s9.csv.csv")[,-1]
dat1 <- read.csv("testfitness_Y_h1_r1_s9.csv.csv")[,-1]
x <- dat0[1,]
h <- 1
s <- .9
getFit <- function(x, h, s){
fem00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12]))
mal00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18]))
femW <- fem00 * 1/(1+s) +
fem01 * 1/(1+h*s) +
fem11 * 1
malW <- (mal00 * (1+s) +
mal01 * (1+h*s) +
mal11 * 1)/(1+s)
fitnesses <- c(femW, malW)
names(fitnesses) <- c("male.fitness", "female.fitness")
return(fitnesses)
}
fem0 <- fem1 <- mal0 <- mal1 <-c()
for(i in 1:100){
foo <- getFit(dat0[i,], h=0, s=.3)
mal0[i] <- foo[1]
fem0[i] <- foo[2]
foo <- getFit(dat1[i,], h=1, s=.3)
mal1[i] <- foo[1]
fem1[i] <- foo[2]
}
dat0 <- read.csv("testfitness_X_h1_r1_s9.csv.csv")[,-1]
setwd("C:/Users/aabcd/OneDrive - Texas A&M University/par-nonpar/analysis.scripts")
dat0 <- read.csv("testfitness_X_h1_r1_s9.csv.csv")[,-1]
dat0 <- read.csv("testfitness_X_h1_r1_s9.csv")[,-1]
dat1 <- read.csv("testfitness_Y_h1_r1_s9.csv")[,-1]
dat0 <- read.csv("testfitness_X_h1_r1_s9.csv")[,-1]
dat1 <- read.csv("testfitness_Y_h1_r1_s9.csv")[,-1]
x <- dat0[1,]
h <- 1
s <- .9
getFit <- function(x, h, s){
fem00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12]))
mal00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18]))
femW <- fem00 * 1/(1+s) +
fem01 * 1/(1+h*s) +
fem11 * 1
malW <- (mal00 * (1+s) +
mal01 * (1+h*s) +
mal11 * 1)/(1+s)
fitnesses <- c(femW, malW)
names(fitnesses) <- c("male.fitness", "female.fitness")
return(fitnesses)
}
fem0 <- fem1 <- mal0 <- mal1 <-c()
for(i in 1:100){
foo <- getFit(dat0[i,], h=0, s=.3)
mal0[i] <- foo[1]
fem0[i] <- foo[2]
foo <- getFit(dat1[i,], h=1, s=.3)
mal1[i] <- foo[1]
fem1[i] <- foo[2]
}
mal1
fem1
mean(fem0)
mean(mal0)
results <- c(mean(fem0), mean(mal0), mean(fem1),mean(mal1))
names(results) <- c(femX, malX, femY, malY)
names(results) <- c('femX', 'malX', 'femY', 'malY')
results
write.csv(results, "results_h1.csv")
library(doSNOW)
source("functions.R")
# Initial Population
pop.size <- 1000
# Probability of an individual having a mutation
mut.prob <- 1/1000
# Generations with columns being gamete types
generations <- 1000
# Set number of clusters
NumberClusters <- 8
cl <- makeCluster(NumberClusters, outfile = "")
registerDoSNOW(cl)
iter <- 100
iter.results <- list()
# This sets up results with each row being an iteration
results <- as.data.frame(matrix(NA, 1, 18))
colnames(results) <- c("XE0N","XE0P","XE0U","XE1N","XE1P","XE1U","XS0N","XS0P","XS0U",
"XS1N","XS1P","XS1U","YS0N","YS0P","YS0U","YS1N","YS1P","YS1U")
# Type of fusions to introduce
# Possible models: (auto.and.) allXY, allX, allY, nonparX, parX, nonparY, parY
models <- c("auto.and.nonparY")
for(i in 1:length(models)){
model <- models[i]
# Dominance factor of the female benefit allele (allele 1)
# 1 = dominant, 0.5 = additive, 0 = recessive
hs <- c(0)
for(j in 1:length(hs)){
h <- hs[j]
# Recombination distance between SAL locus and
# the point that is fused to the sex chromosome
for(k in 1){
r <- c(0.1)
# Selection coefficient for SAL
for(m in 1){
s <- c(0.9)
iter.results <- foreach(n = 1:iter,  .verbose = T) %dopar% {
pop.gam <- getInitialPop(pop.size = pop.size)
# Number of mutant individuals in a given generation
num.mutes <- rpois(n=generations, lambda = mut.prob * pop.size)
for(p in 1:generations){
# Get Juveniles based on initial gamete pool
pop.juv <- getJuveniles(pop.gam, pop.size)
# Get population fitnesses
pop.fits <- popFit(pop.juv, s = s, h = h)
# Viability Selection
pop.adu <- perfSeln(pop.juv, pop.fits)
# Recombination
pop.recom <- perfGameto(pop.adu, r = r)
# Gametogenesis
pop.gam <- StochRound(pop.recom)
# Mutations
pop.gam <- perfMutation(pop.gam, num.mutes, model)
}
return(pop.gam)
}
for (q in 1:iter){
results <- rbind(results, iter.results[[q]])
}
}
}
}
}
results <- results[-1,]
write.csv(results, 'testfitness_Y_h0_r1_s9.csv')
stopCluster(cl)
library(doSNOW)
source("functions.R")
# Initial Population
pop.size <- 1000
# Probability of an individual having a mutation
mut.prob <- 1/1000
# Generations with columns being gamete types
generations <- 1000
# Set number of clusters
NumberClusters <- 8
cl <- makeCluster(NumberClusters, outfile = "")
registerDoSNOW(cl)
iter <- 100
iter.results <- list()
# This sets up results with each row being an iteration
results <- as.data.frame(matrix(NA, 1, 18))
colnames(results) <- c("XE0N","XE0P","XE0U","XE1N","XE1P","XE1U","XS0N","XS0P","XS0U",
"XS1N","XS1P","XS1U","YS0N","YS0P","YS0U","YS1N","YS1P","YS1U")
# Type of fusions to introduce
# Possible models: (auto.and.) allXY, allX, allY, nonparX, parX, nonparY, parY
models <- c("auto.and.nonparX")
for(i in 1:length(models)){
model <- models[i]
# Dominance factor of the female benefit allele (allele 1)
# 1 = dominant, 0.5 = additive, 0 = recessive
hs <- c(0)
for(j in 1:length(hs)){
h <- hs[j]
# Recombination distance between SAL locus and
# the point that is fused to the sex chromosome
for(k in 1){
r <- c(0.1)
# Selection coefficient for SAL
for(m in 1){
s <- c(0.9)
iter.results <- foreach(n = 1:iter,  .verbose = T) %dopar% {
pop.gam <- getInitialPop(pop.size = pop.size)
# Number of mutant individuals in a given generation
num.mutes <- rpois(n=generations, lambda = mut.prob * pop.size)
for(p in 1:generations){
# Get Juveniles based on initial gamete pool
pop.juv <- getJuveniles(pop.gam, pop.size)
# Get population fitnesses
pop.fits <- popFit(pop.juv, s = s, h = h)
# Viability Selection
pop.adu <- perfSeln(pop.juv, pop.fits)
# Recombination
pop.recom <- perfGameto(pop.adu, r = r)
# Gametogenesis
pop.gam <- StochRound(pop.recom)
# Mutations
pop.gam <- perfMutation(pop.gam, num.mutes, model)
}
return(pop.gam)
}
for (q in 1:iter){
results <- rbind(results, iter.results[[q]])
}
}
}
}
}
results <- results[-1,]
write.csv(results, 'testfitness_X_h0_r1_s9.csv')
stopCluster(cl)
library(doSNOW)
source("functions.R")
# Initial Population
pop.size <- 1000
# Probability of an individual having a mutation
mut.prob <- 1/1000
# Generations with columns being gamete types
generations <- 1000
# Set number of clusters
NumberClusters <- 8
cl <- makeCluster(NumberClusters, outfile = "")
registerDoSNOW(cl)
iter <- 100
iter.results <- list()
# This sets up results with each row being an iteration
results <- as.data.frame(matrix(NA, 1, 18))
colnames(results) <- c("XE0N","XE0P","XE0U","XE1N","XE1P","XE1U","XS0N","XS0P","XS0U",
"XS1N","XS1P","XS1U","YS0N","YS0P","YS0U","YS1N","YS1P","YS1U")
# Type of fusions to introduce
# Possible models: (auto.and.) allXY, allX, allY, nonparX, parX, nonparY, parY
models <- c("auto.and.nonparX")
for(i in 1:length(models)){
model <- models[i]
# Dominance factor of the female benefit allele (allele 1)
# 1 = dominant, 0.5 = additive, 0 = recessive
hs <- c(0)
for(j in 1:length(hs)){
h <- hs[j]
# Recombination distance between SAL locus and
# the point that is fused to the sex chromosome
for(k in 1){
r <- c(0.1)
# Selection coefficient for SAL
for(m in 1){
s <- c(0.9)
iter.results <- foreach(n = 1:iter,  .verbose = T) %dopar% {
pop.gam <- getInitialPop(pop.size = pop.size)
# Number of mutant individuals in a given generation
num.mutes <- rpois(n=generations, lambda = mut.prob * pop.size)
for(p in 1:generations){
# Get Juveniles based on initial gamete pool
pop.juv <- getJuveniles(pop.gam, pop.size)
# Get population fitnesses
pop.fits <- popFit(pop.juv, s = s, h = h)
# Viability Selection
pop.adu <- perfSeln(pop.juv, pop.fits)
# Recombination
pop.recom <- perfGameto(pop.adu, r = r)
# Gametogenesis
pop.gam <- StochRound(pop.recom)
# Mutations
pop.gam <- perfMutation(pop.gam, num.mutes, model)
}
return(pop.gam)
}
for (q in 1:iter){
results <- rbind(results, iter.results[[q]])
}
}
}
}
}
results <- results[-1,]
write.csv(results, 'testfitness_X_h0_r1_s9.csv')
stopCluster(cl)
dat0 <- read.csv("testfitness_X_h0_r1_s9.csv")[,-1]
dat1 <- read.csv("testfitness_Y_h0_r1_s9.csv")[,-1]
x <- dat0[1,]
h <- 0
s <- .9
getFit <- function(x, h, s){
fem00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12]))
mal00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18]))
femW <- fem00 * 1/(1+s) +
fem01 * 1/(1+h*s) +
fem11 * 1
malW <- (mal00 * (1+s) +
mal01 * (1+h*s) +
mal11 * 1)/(1+s)
fitnesses <- c(femW, malW)
names(fitnesses) <- c("male.fitness", "female.fitness")
return(fitnesses)
}
fem0 <- fem1 <- mal0 <- mal1 <-c()
for(i in 1:100){
foo <- getFit(dat0[i,], h=0, s=.3)
mal0[i] <- foo[1]
fem0[i] <- foo[2]
foo <- getFit(dat1[i,], h=1, s=.3)
mal1[i] <- foo[1]
fem1[i] <- foo[2]
}
results <- c(mean(fem0), mean(mal0), mean(fem1),mean(mal1))
names(results) <- c('femX', 'malX', 'femY', 'malY')
write.csv(results, "results_h0.csv")
dat0 <- read.csv("testfitness_X_h0_r1_s9.csv")[,-1]
dat1 <- read.csv("testfitness_Y_h0_r1_s9.csv")[,-1]
x <- dat0[1,]
h <- 0
s <- .9
getFit <- function(x, h, s){
fem00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12]))
mal00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18]))
femW <- fem00 * 1/(1+s) +
fem01 * 1/(1+h*s) +
fem11 * 1
malW <- (mal00 * (1+s) +
mal01 * (1+h*s) +
mal11 * 1)/(1+s)
fitnesses <- c(femW, malW)
names(fitnesses) <- c("male.fitness", "female.fitness")
return(fitnesses)
}
fem0 <- fem1 <- mal0 <- mal1 <-c()
for(i in 1:100){
foo <- getFit(dat0[i,], h=0, s=.9)
mal0[i] <- foo[1]
fem0[i] <- foo[2]
foo <- getFit(dat1[i,], h=0, s=.9)
mal1[i] <- foo[1]
fem1[i] <- foo[2]
}
results <- c(mean(fem0), mean(mal0), mean(fem1),mean(mal1))
names(results) <- c('femX', 'malX', 'femY', 'malY')
write.csv(results, "results_h0.csv")
dat0 <- read.csv("testfitness_X_h1_r1_s9.csv")[,-1]
dat1 <- read.csv("testfitness_Y_h1_r1_s9.csv")[,-1]
x <- dat0[1,]
h <- 0
s <- .9
getFit <- function(x, h, s){
fem00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12]))
mal00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18]))
femW <- fem00 * 1/(1+s) +
fem01 * 1/(1+h*s) +
fem11 * 1
malW <- (mal00 * (1+s) +
mal01 * (1+h*s) +
mal11 * 1)/(1+s)
fitnesses <- c(femW, malW)
names(fitnesses) <- c("male.fitness", "female.fitness")
return(fitnesses)
}
fem0 <- fem1 <- mal0 <- mal1 <-c()
for(i in 1:100){
foo <- getFit(dat0[i,], h=1, s=.9)
mal0[i] <- foo[1]
fem0[i] <- foo[2]
foo <- getFit(dat1[i,], h=1, s=.9)
mal1[i] <- foo[1]
fem1[i] <- foo[2]
}
results <- c(mean(fem0), mean(mal0), mean(fem1),mean(mal1))
names(results) <- c('femX', 'malX', 'femY', 'malY')
write.csv(results, "results_h0.csv")
dat0 <- read.csv("testfitness_X_h1_r1_s9.csv")[,-1]
dat1 <- read.csv("testfitness_Y_h1_r1_s9.csv")[,-1]
x <- dat0[1,]
h <- 0
s <- .9
getFit <- function(x, h, s){
fem00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12]))
mal00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18]))
femW <- fem00 * 1/(1+s) +
fem01 * 1/(1+h*s) +
fem11 * 1
malW <- (mal00 * (1+s) +
mal01 * (1+h*s) +
mal11 * 1)/(1+s)
fitnesses <- c(femW, malW)
names(fitnesses) <- c("male.fitness", "female.fitness")
return(fitnesses)
}
fem0 <- fem1 <- mal0 <- mal1 <-c()
for(i in 1:100){
foo <- getFit(dat0[i,], h=1, s=.9)
mal0[i] <- foo[1]
fem0[i] <- foo[2]
foo <- getFit(dat1[i,], h=1, s=.9)
mal1[i] <- foo[1]
fem1[i] <- foo[2]
}
results <- c(mean(fem0), mean(mal0), mean(fem1),mean(mal1))
names(results) <- c('femX', 'malX', 'femY', 'malY')
write.csv(results, "results_h1.csv")
dat0 <- read.csv("testfitness_X_h0_r1_s9.csv")[,-1]
dat1 <- read.csv("testfitness_Y_h0_r1_s9.csv")[,-1]
x <- dat0[1,]
h <- 0
s <- .9
getFit <- function(x, h, s){
fem00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,7:9])/sum(x[,7:12]))
fem11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,10:12])/sum(x[,7:12]))
mal00 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal01 <- (sum(x[,1:3])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18])) +
(sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,13:15])/sum(x[,13:18]))
mal11 <- (sum(x[,4:6])/sum(x[,1:6])) * (sum(x[,16:18])/sum(x[,13:18]))
femW <- fem00 * 1/(1+s) +
fem01 * 1/(1+h*s) +
fem11 * 1
malW <- (mal00 * (1+s) +
mal01 * (1+h*s) +
mal11 * 1)/(1+s)
fitnesses <- c(femW, malW)
names(fitnesses) <- c("male.fitness", "female.fitness")
return(fitnesses)
}
fem0 <- fem1 <- mal0 <- mal1 <-c()
for(i in 1:100){
foo <- getFit(dat0[i,], h=0, s=.9)
mal0[i] <- foo[1]
fem0[i] <- foo[2]
foo <- getFit(dat1[i,], h=0, s=.9)
mal1[i] <- foo[1]
fem1[i] <- foo[2]
}
results <- c(mean(fem0), mean(mal0), mean(fem1),mean(mal1))
names(results) <- c('femX', 'malX', 'femY', 'malY')
write.csv(results, "results_h0.csv")
